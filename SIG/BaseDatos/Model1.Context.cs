//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SIG.BaseDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SistemaIntegralGestionEntities : DbContext
    {
        public SistemaIntegralGestionEntities()
            : base("name=SistemaIntegralGestionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Adm_Permiso> Adm_Permiso { get; set; }
        public virtual DbSet<Adm_Rol> Adm_Rol { get; set; }
        public virtual DbSet<Conta_Transaccion> Conta_Transaccion { get; set; }
        public virtual DbSet<Emp_BitacoraIngreso> Emp_BitacoraIngreso { get; set; }
        public virtual DbSet<Emp_ContactoEmergencia> Emp_ContactoEmergencia { get; set; }
        public virtual DbSet<Emp_Departamento> Emp_Departamento { get; set; }
        public virtual DbSet<Emp_Puesto> Emp_Puesto { get; set; }
        public virtual DbSet<Emp_RemuneracionDeduccion> Emp_RemuneracionDeduccion { get; set; }
        public virtual DbSet<Emp_Vacaciones> Emp_Vacaciones { get; set; }
        public virtual DbSet<Empleado> Empleado { get; set; }
        public virtual DbSet<Entregas> Entregas { get; set; }
        public virtual DbSet<PDA_Tarea> PDA_Tarea { get; set; }
        public virtual DbSet<PlanDeAccion> PlanDeAccion { get; set; }
        public virtual DbSet<Prov_Compra> Prov_Compra { get; set; }
        public virtual DbSet<Prov_CompraDetalle> Prov_CompraDetalle { get; set; }
        public virtual DbSet<Prov_Contacto> Prov_Contacto { get; set; }
        public virtual DbSet<Prov_Pago> Prov_Pago { get; set; }
        public virtual DbSet<Prov_Producto> Prov_Producto { get; set; }
        public virtual DbSet<Proveedor> Proveedor { get; set; }
        public virtual DbSet<Ticket> Ticket { get; set; }
        public virtual DbSet<Ticket_Estado> Ticket_Estado { get; set; }
        public virtual DbSet<Ticket_Prioridad> Ticket_Prioridad { get; set; }
        public virtual DbSet<Ticket_Tipo> Ticket_Tipo { get; set; }
        public virtual DbSet<Venta_Cliente> Venta_Cliente { get; set; }
        public virtual DbSet<Venta_Factura> Venta_Factura { get; set; }
        public virtual DbSet<Venta_FacturaDetalle> Venta_FacturaDetalle { get; set; }
        public virtual DbSet<Venta_MetodoPago> Venta_MetodoPago { get; set; }
        public virtual DbSet<Venta_PagoCliente> Venta_PagoCliente { get; set; }
        public virtual DbSet<Venta_Pedido> Venta_Pedido { get; set; }
        public virtual DbSet<Venta_Producto> Venta_Producto { get; set; }
    
        public virtual int CambiarContrasenna(ObjectParameter id, string nuevaContrasena)
        {
            var nuevaContrasenaParameter = nuevaContrasena != null ?
                new ObjectParameter("nuevaContrasena", nuevaContrasena) :
                new ObjectParameter("nuevaContrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CambiarContrasenna", id, nuevaContrasenaParameter);
        }
    
        public virtual ObjectResult<iniciarSesion_Result> iniciarSesion(string correo_electronico, string contrasena, ObjectParameter id, ObjectParameter loginSuccess, ObjectParameter rol, ObjectParameter usuario)
        {
            var correo_electronicoParameter = correo_electronico != null ?
                new ObjectParameter("correo_electronico", correo_electronico) :
                new ObjectParameter("correo_electronico", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<iniciarSesion_Result>("iniciarSesion", correo_electronicoParameter, contrasenaParameter, id, loginSuccess, rol, usuario);
        }
    
        public virtual ObjectResult<Nullable<decimal>> registrarEmpleado(string nombre, string apellidos, string numeroIdentificacion, Nullable<System.DateTime> fechaNacimiento, string direccion, string telefono, string correoElectronico, Nullable<int> departamentoID, Nullable<int> puestoID, Nullable<int> rolID, Nullable<bool> estadoEmpleado, string usuario, string contrasena)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var numeroIdentificacionParameter = numeroIdentificacion != null ?
                new ObjectParameter("NumeroIdentificacion", numeroIdentificacion) :
                new ObjectParameter("NumeroIdentificacion", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("CorreoElectronico", correoElectronico) :
                new ObjectParameter("CorreoElectronico", typeof(string));
    
            var departamentoIDParameter = departamentoID.HasValue ?
                new ObjectParameter("DepartamentoID", departamentoID) :
                new ObjectParameter("DepartamentoID", typeof(int));
    
            var puestoIDParameter = puestoID.HasValue ?
                new ObjectParameter("PuestoID", puestoID) :
                new ObjectParameter("PuestoID", typeof(int));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var estadoEmpleadoParameter = estadoEmpleado.HasValue ?
                new ObjectParameter("EstadoEmpleado", estadoEmpleado) :
                new ObjectParameter("EstadoEmpleado", typeof(bool));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("registrarEmpleado", nombreParameter, apellidosParameter, numeroIdentificacionParameter, fechaNacimientoParameter, direccionParameter, telefonoParameter, correoElectronicoParameter, departamentoIDParameter, puestoIDParameter, rolIDParameter, estadoEmpleadoParameter, usuarioParameter, contrasenaParameter);
        }
    
        public virtual ObjectResult<ValidarCorreo_Result> ValidarCorreo(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidarCorreo_Result>("ValidarCorreo", emailParameter);
        }
    
        public virtual ObjectResult<ObtenerEmpleadoPorFiltro_Result> ObtenerEmpleadoPorFiltro(string nombre, string correoElectronico, string numeroCedula)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("CorreoElectronico", correoElectronico) :
                new ObjectParameter("CorreoElectronico", typeof(string));
    
            var numeroCedulaParameter = numeroCedula != null ?
                new ObjectParameter("NumeroCedula", numeroCedula) :
                new ObjectParameter("NumeroCedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerEmpleadoPorFiltro_Result>("ObtenerEmpleadoPorFiltro", nombreParameter, correoElectronicoParameter, numeroCedulaParameter);
        }
    
        public virtual int EditarEmpleado(Nullable<int> id, string nombre, string apellidos, string correoElectronico, string telefono, string direccion, Nullable<System.DateTime> fechaNacimiento, string numeroIdentificacion, Nullable<int> departamentoId, Nullable<int> puestoId, Nullable<int> rolId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("CorreoElectronico", correoElectronico) :
                new ObjectParameter("CorreoElectronico", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var numeroIdentificacionParameter = numeroIdentificacion != null ?
                new ObjectParameter("NumeroIdentificacion", numeroIdentificacion) :
                new ObjectParameter("NumeroIdentificacion", typeof(string));
    
            var departamentoIdParameter = departamentoId.HasValue ?
                new ObjectParameter("DepartamentoId", departamentoId) :
                new ObjectParameter("DepartamentoId", typeof(int));
    
            var puestoIdParameter = puestoId.HasValue ?
                new ObjectParameter("PuestoId", puestoId) :
                new ObjectParameter("PuestoId", typeof(int));
    
            var rolIdParameter = rolId.HasValue ?
                new ObjectParameter("RolId", rolId) :
                new ObjectParameter("RolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarEmpleado", idParameter, nombreParameter, apellidosParameter, correoElectronicoParameter, telefonoParameter, direccionParameter, fechaNacimientoParameter, numeroIdentificacionParameter, departamentoIdParameter, puestoIdParameter, rolIdParameter);
        }
    
        public virtual int ActualizarVentaPedido(Nullable<int> id, Nullable<int> cliente_id, Nullable<System.DateTime> fecha_pedido, string numero_pedido)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var cliente_idParameter = cliente_id.HasValue ?
                new ObjectParameter("cliente_id", cliente_id) :
                new ObjectParameter("cliente_id", typeof(int));
    
            var fecha_pedidoParameter = fecha_pedido.HasValue ?
                new ObjectParameter("fecha_pedido", fecha_pedido) :
                new ObjectParameter("fecha_pedido", typeof(System.DateTime));
    
            var numero_pedidoParameter = numero_pedido != null ?
                new ObjectParameter("numero_pedido", numero_pedido) :
                new ObjectParameter("numero_pedido", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarVentaPedido", idParameter, cliente_idParameter, fecha_pedidoParameter, numero_pedidoParameter);
        }
    
        public virtual int CrearVentaPedido(Nullable<int> cliente_id, Nullable<System.DateTime> fecha_pedido, string numero_pedido)
        {
            var cliente_idParameter = cliente_id.HasValue ?
                new ObjectParameter("cliente_id", cliente_id) :
                new ObjectParameter("cliente_id", typeof(int));
    
            var fecha_pedidoParameter = fecha_pedido.HasValue ?
                new ObjectParameter("fecha_pedido", fecha_pedido) :
                new ObjectParameter("fecha_pedido", typeof(System.DateTime));
    
            var numero_pedidoParameter = numero_pedido != null ?
                new ObjectParameter("numero_pedido", numero_pedido) :
                new ObjectParameter("numero_pedido", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrearVentaPedido", cliente_idParameter, fecha_pedidoParameter, numero_pedidoParameter);
        }
    
        public virtual int EliminarVentaPedido(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarVentaPedido", idParameter);
        }
    
        public virtual ObjectResult<ObtenerVentaPedido_Result> ObtenerVentaPedido(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerVentaPedido_Result>("ObtenerVentaPedido", idParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int RegistrarEntrega(Nullable<int> pedidoId, Nullable<System.DateTime> fechaEntrega, string direccionEntrega, string articulosEntregados, string observacionesAdicionales)
        {
            var pedidoIdParameter = pedidoId.HasValue ?
                new ObjectParameter("PedidoId", pedidoId) :
                new ObjectParameter("PedidoId", typeof(int));
    
            var fechaEntregaParameter = fechaEntrega.HasValue ?
                new ObjectParameter("FechaEntrega", fechaEntrega) :
                new ObjectParameter("FechaEntrega", typeof(System.DateTime));
    
            var direccionEntregaParameter = direccionEntrega != null ?
                new ObjectParameter("DireccionEntrega", direccionEntrega) :
                new ObjectParameter("DireccionEntrega", typeof(string));
    
            var articulosEntregadosParameter = articulosEntregados != null ?
                new ObjectParameter("ArticulosEntregados", articulosEntregados) :
                new ObjectParameter("ArticulosEntregados", typeof(string));
    
            var observacionesAdicionalesParameter = observacionesAdicionales != null ?
                new ObjectParameter("ObservacionesAdicionales", observacionesAdicionales) :
                new ObjectParameter("ObservacionesAdicionales", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarEntrega", pedidoIdParameter, fechaEntregaParameter, direccionEntregaParameter, articulosEntregadosParameter, observacionesAdicionalesParameter);
        }
    
        public virtual ObjectResult<ObtenerTodasLasEntregas_Result> ObtenerTodasLasEntregas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerTodasLasEntregas_Result>("ObtenerTodasLasEntregas");
        }
    }
}
