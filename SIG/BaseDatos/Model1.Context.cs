//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SIG.BaseDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SistemaIntegralGestionEntities : DbContext
    {
        public SistemaIntegralGestionEntities()
            : base("name=SistemaIntegralGestionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Adm_Permiso> Adm_Permiso { get; set; }
        public virtual DbSet<Adm_Rol> Adm_Rol { get; set; }
        public virtual DbSet<Conta_Transaccion> Conta_Transaccion { get; set; }
        public virtual DbSet<Emp_BitacoraIngreso> Emp_BitacoraIngreso { get; set; }
        public virtual DbSet<Emp_ContactoEmergencia> Emp_ContactoEmergencia { get; set; }
        public virtual DbSet<Emp_Departamento> Emp_Departamento { get; set; }
        public virtual DbSet<Emp_Puesto> Emp_Puesto { get; set; }
        public virtual DbSet<Emp_RemuneracionDeduccion> Emp_RemuneracionDeduccion { get; set; }
        public virtual DbSet<Emp_Vacaciones> Emp_Vacaciones { get; set; }
        public virtual DbSet<Empleado> Empleado { get; set; }
        public virtual DbSet<Entregas> Entregas { get; set; }
        public virtual DbSet<PDA_Tarea> PDA_Tarea { get; set; }
        public virtual DbSet<PlanDeAccion> PlanDeAccion { get; set; }
        public virtual DbSet<Prov_Compra> Prov_Compra { get; set; }
        public virtual DbSet<Prov_CompraDetalle> Prov_CompraDetalle { get; set; }
        public virtual DbSet<Prov_Contacto> Prov_Contacto { get; set; }
        public virtual DbSet<Prov_Pago> Prov_Pago { get; set; }
        public virtual DbSet<Prov_Producto> Prov_Producto { get; set; }
        public virtual DbSet<Proveedor> Proveedor { get; set; }
        public virtual DbSet<Ticket> Ticket { get; set; }
        public virtual DbSet<Ticket_Estado> Ticket_Estado { get; set; }
        public virtual DbSet<Ticket_Prioridad> Ticket_Prioridad { get; set; }
        public virtual DbSet<Ticket_Tipo> Ticket_Tipo { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<Venta_Cliente> Venta_Cliente { get; set; }
        public virtual DbSet<Venta_Factura> Venta_Factura { get; set; }
        public virtual DbSet<Venta_FacturaDetalle> Venta_FacturaDetalle { get; set; }
        public virtual DbSet<Venta_MetodoPago> Venta_MetodoPago { get; set; }
        public virtual DbSet<Venta_PagoCliente> Venta_PagoCliente { get; set; }
        public virtual DbSet<Venta_Pedido> Venta_Pedido { get; set; }
        public virtual DbSet<Venta_Producto> Venta_Producto { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    
        public virtual int ActualizarTicket(Nullable<int> idTicket, Nullable<int> estado, Nullable<int> tipoIncidencia, Nullable<int> prioridad, string titulo, string descripcion, string comentariosUsuario, Nullable<System.DateTime> fechaRegistraTecnico, Nullable<int> idTecnico, string comentarioTecnico, Nullable<System.DateTime> fechaCierreTicket)
        {
            var idTicketParameter = idTicket.HasValue ?
                new ObjectParameter("idTicket", idTicket) :
                new ObjectParameter("idTicket", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(int));
    
            var tipoIncidenciaParameter = tipoIncidencia.HasValue ?
                new ObjectParameter("tipoIncidencia", tipoIncidencia) :
                new ObjectParameter("tipoIncidencia", typeof(int));
    
            var prioridadParameter = prioridad.HasValue ?
                new ObjectParameter("prioridad", prioridad) :
                new ObjectParameter("prioridad", typeof(int));
    
            var tituloParameter = titulo != null ?
                new ObjectParameter("titulo", titulo) :
                new ObjectParameter("titulo", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var comentariosUsuarioParameter = comentariosUsuario != null ?
                new ObjectParameter("comentariosUsuario", comentariosUsuario) :
                new ObjectParameter("comentariosUsuario", typeof(string));
    
            var fechaRegistraTecnicoParameter = fechaRegistraTecnico.HasValue ?
                new ObjectParameter("fechaRegistraTecnico", fechaRegistraTecnico) :
                new ObjectParameter("fechaRegistraTecnico", typeof(System.DateTime));
    
            var idTecnicoParameter = idTecnico.HasValue ?
                new ObjectParameter("idTecnico", idTecnico) :
                new ObjectParameter("idTecnico", typeof(int));
    
            var comentarioTecnicoParameter = comentarioTecnico != null ?
                new ObjectParameter("comentarioTecnico", comentarioTecnico) :
                new ObjectParameter("comentarioTecnico", typeof(string));
    
            var fechaCierreTicketParameter = fechaCierreTicket.HasValue ?
                new ObjectParameter("fechaCierreTicket", fechaCierreTicket) :
                new ObjectParameter("fechaCierreTicket", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarTicket", idTicketParameter, estadoParameter, tipoIncidenciaParameter, prioridadParameter, tituloParameter, descripcionParameter, comentariosUsuarioParameter, fechaRegistraTecnicoParameter, idTecnicoParameter, comentarioTecnicoParameter, fechaCierreTicketParameter);
        }
    
        public virtual int CerrarTicket(Nullable<int> idTicket)
        {
            var idTicketParameter = idTicket.HasValue ?
                new ObjectParameter("idTicket", idTicket) :
                new ObjectParameter("idTicket", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CerrarTicket", idTicketParameter);
        }
    
        public virtual ObjectResult<IniciarSesion_Result> IniciarSesion(string usuario, string contrasena, ObjectParameter id, ObjectParameter loginSuccess, ObjectParameter tipo)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IniciarSesion_Result>("IniciarSesion", usuarioParameter, contrasenaParameter, id, loginSuccess, tipo);
        }
    
        public virtual int InsertarTicket(Nullable<int> idUsuario, string titulo, string descripcion, Nullable<int> tipoIncidencia, string comentariosUsuario, Nullable<System.DateTime> fechaRegistroUsuario, Nullable<int> estado)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var tituloParameter = titulo != null ?
                new ObjectParameter("titulo", titulo) :
                new ObjectParameter("titulo", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var tipoIncidenciaParameter = tipoIncidencia.HasValue ?
                new ObjectParameter("tipoIncidencia", tipoIncidencia) :
                new ObjectParameter("tipoIncidencia", typeof(int));
    
            var comentariosUsuarioParameter = comentariosUsuario != null ?
                new ObjectParameter("comentariosUsuario", comentariosUsuario) :
                new ObjectParameter("comentariosUsuario", typeof(string));
    
            var fechaRegistroUsuarioParameter = fechaRegistroUsuario.HasValue ?
                new ObjectParameter("fechaRegistroUsuario", fechaRegistroUsuario) :
                new ObjectParameter("fechaRegistroUsuario", typeof(System.DateTime));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarTicket", idUsuarioParameter, tituloParameter, descripcionParameter, tipoIncidenciaParameter, comentariosUsuarioParameter, fechaRegistroUsuarioParameter, estadoParameter);
        }
    
        public virtual int CambiarContrasenna(string usuario, string contrasenaTemporal, ObjectParameter resultado)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaTemporalParameter = contrasenaTemporal != null ?
                new ObjectParameter("ContrasenaTemporal", contrasenaTemporal) :
                new ObjectParameter("ContrasenaTemporal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CambiarContrasenna", usuarioParameter, contrasenaTemporalParameter, resultado);
        }
    
        public virtual ObjectResult<ValidarCorreo_Result> ValidarCorreo(string usuario)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidarCorreo_Result>("ValidarCorreo", usuarioParameter);
        }
    
        public virtual int RegistrarEmpleado(string nombre, string apellidos, string numero_identificacion, Nullable<System.DateTime> fecha_nacimiento, string direccion, string telefono, string correo_electronico, Nullable<int> departamento_id, Nullable<int> puesto_id, string usuario, byte[] contrasena)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var numero_identificacionParameter = numero_identificacion != null ?
                new ObjectParameter("numero_identificacion", numero_identificacion) :
                new ObjectParameter("numero_identificacion", typeof(string));
    
            var fecha_nacimientoParameter = fecha_nacimiento.HasValue ?
                new ObjectParameter("fecha_nacimiento", fecha_nacimiento) :
                new ObjectParameter("fecha_nacimiento", typeof(System.DateTime));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correo_electronicoParameter = correo_electronico != null ?
                new ObjectParameter("correo_electronico", correo_electronico) :
                new ObjectParameter("correo_electronico", typeof(string));
    
            var departamento_idParameter = departamento_id.HasValue ?
                new ObjectParameter("departamento_id", departamento_id) :
                new ObjectParameter("departamento_id", typeof(int));
    
            var puesto_idParameter = puesto_id.HasValue ?
                new ObjectParameter("puesto_id", puesto_id) :
                new ObjectParameter("puesto_id", typeof(int));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("contrasena", contrasena) :
                new ObjectParameter("contrasena", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarEmpleado", nombreParameter, apellidosParameter, numero_identificacionParameter, fecha_nacimientoParameter, direccionParameter, telefonoParameter, correo_electronicoParameter, departamento_idParameter, puesto_idParameter, usuarioParameter, contrasenaParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
