//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SIG.BaseDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SistemaIntegralGestionEntities : DbContext
    {
        public SistemaIntegralGestionEntities()
            : base("name=SistemaIntegralGestionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Adm_Permiso> Adm_Permiso { get; set; }
        public virtual DbSet<Adm_Rol> Adm_Rol { get; set; }
        public virtual DbSet<Conta_Transaccion> Conta_Transaccion { get; set; }
        public virtual DbSet<Emp_BitacoraIngreso> Emp_BitacoraIngreso { get; set; }
        public virtual DbSet<Emp_ContactoEmergencia> Emp_ContactoEmergencia { get; set; }
        public virtual DbSet<Emp_Departamento> Emp_Departamento { get; set; }
        public virtual DbSet<Emp_Puesto> Emp_Puesto { get; set; }
        public virtual DbSet<Emp_RemuneracionDeduccion> Emp_RemuneracionDeduccion { get; set; }
        public virtual DbSet<Emp_Vacaciones> Emp_Vacaciones { get; set; }
        public virtual DbSet<Empleado> Empleado { get; set; }
        public virtual DbSet<Entregas> Entregas { get; set; }
        public virtual DbSet<PDA_Tarea> PDA_Tarea { get; set; }
        public virtual DbSet<PlanDeAccion> PlanDeAccion { get; set; }
        public virtual DbSet<Prov_Compra> Prov_Compra { get; set; }
        public virtual DbSet<Prov_CompraDetalle> Prov_CompraDetalle { get; set; }
        public virtual DbSet<Prov_Contacto> Prov_Contacto { get; set; }
        public virtual DbSet<Prov_Pago> Prov_Pago { get; set; }
        public virtual DbSet<Prov_Producto> Prov_Producto { get; set; }
        public virtual DbSet<Proveedor> Proveedor { get; set; }
        public virtual DbSet<Ticket> Ticket { get; set; }
        public virtual DbSet<Ticket_Estado> Ticket_Estado { get; set; }
        public virtual DbSet<Ticket_Prioridad> Ticket_Prioridad { get; set; }
        public virtual DbSet<Ticket_Tipo> Ticket_Tipo { get; set; }
        public virtual DbSet<Venta_Cliente> Venta_Cliente { get; set; }
        public virtual DbSet<Venta_Factura> Venta_Factura { get; set; }
        public virtual DbSet<Venta_FacturaDetalle> Venta_FacturaDetalle { get; set; }
        public virtual DbSet<Venta_MetodoPago> Venta_MetodoPago { get; set; }
        public virtual DbSet<Venta_PagoCliente> Venta_PagoCliente { get; set; }
        public virtual DbSet<Venta_Pedido> Venta_Pedido { get; set; }
        public virtual DbSet<Venta_Producto> Venta_Producto { get; set; }
    
        public virtual int CambiarContrasenna(ObjectParameter id, string nuevaContrasena)
        {
            var nuevaContrasenaParameter = nuevaContrasena != null ?
                new ObjectParameter("nuevaContrasena", nuevaContrasena) :
                new ObjectParameter("nuevaContrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CambiarContrasenna", id, nuevaContrasenaParameter);
        }
    
        public virtual ObjectResult<iniciarSesion_Result> iniciarSesion(string correo_electronico, string contrasena, ObjectParameter id, ObjectParameter loginSuccess, ObjectParameter rol, ObjectParameter usuario)
        {
            var correo_electronicoParameter = correo_electronico != null ?
                new ObjectParameter("correo_electronico", correo_electronico) :
                new ObjectParameter("correo_electronico", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<iniciarSesion_Result>("iniciarSesion", correo_electronicoParameter, contrasenaParameter, id, loginSuccess, rol, usuario);
        }
    
        public virtual int registrarEmpleado(string nombre, string apellidos, string numeroIdentificacion, Nullable<System.DateTime> fechaNacimiento, string direccion, string telefono, string correoElectronico, Nullable<int> departamentoID, Nullable<int> puestoID, Nullable<int> rolID, Nullable<bool> estadoEmpleado, string usuario, string contrasena)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var numeroIdentificacionParameter = numeroIdentificacion != null ?
                new ObjectParameter("NumeroIdentificacion", numeroIdentificacion) :
                new ObjectParameter("NumeroIdentificacion", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("CorreoElectronico", correoElectronico) :
                new ObjectParameter("CorreoElectronico", typeof(string));
    
            var departamentoIDParameter = departamentoID.HasValue ?
                new ObjectParameter("DepartamentoID", departamentoID) :
                new ObjectParameter("DepartamentoID", typeof(int));
    
            var puestoIDParameter = puestoID.HasValue ?
                new ObjectParameter("PuestoID", puestoID) :
                new ObjectParameter("PuestoID", typeof(int));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var estadoEmpleadoParameter = estadoEmpleado.HasValue ?
                new ObjectParameter("EstadoEmpleado", estadoEmpleado) :
                new ObjectParameter("EstadoEmpleado", typeof(bool));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("registrarEmpleado", nombreParameter, apellidosParameter, numeroIdentificacionParameter, fechaNacimientoParameter, direccionParameter, telefonoParameter, correoElectronicoParameter, departamentoIDParameter, puestoIDParameter, rolIDParameter, estadoEmpleadoParameter, usuarioParameter, contrasenaParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> registrarUsuario(string nombre, string apellidos, string numero_identificacion, Nullable<System.DateTime> fecha_nacimiento, string direccion, string telefono, string correo_electronico, Nullable<int> departamento_id, Nullable<int> puesto_id, Nullable<int> rol_id, Nullable<bool> estado_empleado, string usuario, byte[] contrasena)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var numero_identificacionParameter = numero_identificacion != null ?
                new ObjectParameter("numero_identificacion", numero_identificacion) :
                new ObjectParameter("numero_identificacion", typeof(string));
    
            var fecha_nacimientoParameter = fecha_nacimiento.HasValue ?
                new ObjectParameter("fecha_nacimiento", fecha_nacimiento) :
                new ObjectParameter("fecha_nacimiento", typeof(System.DateTime));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correo_electronicoParameter = correo_electronico != null ?
                new ObjectParameter("correo_electronico", correo_electronico) :
                new ObjectParameter("correo_electronico", typeof(string));
    
            var departamento_idParameter = departamento_id.HasValue ?
                new ObjectParameter("departamento_id", departamento_id) :
                new ObjectParameter("departamento_id", typeof(int));
    
            var puesto_idParameter = puesto_id.HasValue ?
                new ObjectParameter("puesto_id", puesto_id) :
                new ObjectParameter("puesto_id", typeof(int));
    
            var rol_idParameter = rol_id.HasValue ?
                new ObjectParameter("rol_id", rol_id) :
                new ObjectParameter("rol_id", typeof(int));
    
            var estado_empleadoParameter = estado_empleado.HasValue ?
                new ObjectParameter("estado_empleado", estado_empleado) :
                new ObjectParameter("estado_empleado", typeof(bool));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("contrasena", contrasena) :
                new ObjectParameter("contrasena", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("registrarUsuario", nombreParameter, apellidosParameter, numero_identificacionParameter, fecha_nacimientoParameter, direccionParameter, telefonoParameter, correo_electronicoParameter, departamento_idParameter, puesto_idParameter, rol_idParameter, estado_empleadoParameter, usuarioParameter, contrasenaParameter);
        }
    
        public virtual ObjectResult<ValidarCorreo_Result> ValidarCorreo(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidarCorreo_Result>("ValidarCorreo", emailParameter);
        }
    
        public virtual ObjectResult<ValidarCorreo1_Result> ValidarCorreo1(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidarCorreo1_Result>("ValidarCorreo1", emailParameter);
        }
    }
}
